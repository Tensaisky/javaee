<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
	<!-- spring-demo01 -->
	
	<bean id="helloService" class="com.wpx.spring.demo01.HelloServiceImpl">
			<property name="name" value="wpx"></property>
	</bean>
	
	<!-- spring-demo02 -->
	
	<bean id="bean01" class="com.wpx.spring.demo02.Bean01">
		<!-- 默认为无参构造 -->
	</bean>
		<!-- 使用静态工厂 -->
	<bean id="bean02" class="com.wpx.spring.demo02.BeanFactory02" factory-method="getInstance"> 
	</bean>
		<!-- 第三种使用实例工厂实例化 -->
	<bean id="beanFactory03" class="com.wpx.spring.demo02.BeanFactory03"></bean>
	<bean id="bean03" factory-bean="beanFactory03" factory-method="getInstance"></bean>
	
	<!-- spring-demo03 -->
	
		<!-- scope指定 作用范围-->
		<!-- singleton/单例(默认)  prototype/每次从容器中调用bean时，容器都创建一个新的实例，每次调用都相当于new一个新的对象 -->
		<!-- request/每次http请求都会创建一个新的bean session/ 同一个session共享同一个bean，不同的session使用不同的bean。 -->
		<!-- global session/ 同一个全局session共享一个Bean，一般用于portlet应用环境， -->
	<bean id="customer" class="com.wpx.spring.demo03.Customer" scope="prototype"></bean>
		<!-- spring的生命周期 -->
	<bean id="product" class="com.wpx.spring.demo03.Product" init-method="init" destroy-method="destory"></bean>
	
	<!-- spring-demo04 -->
	
	<bean id="customerService" class="com.wpx.spring.demo04.CustomerServiceImpl" init-method="setup" destroy-method="teardown">
		<property name="name" value="wpx"></property>
	</bean>
	<bean class="com.wpx.spring.demo04.MyBeanPostProcessor"></bean>
	
	<!-- spring-demo05 -->
	
	<bean id="car01" class="com.wpx.spring.demo05.Car01">
		<!-- <constructor-arg name="name" value="wpx"/>
		<constructor-arg name="price" value="1233"/> -->
		<!-- 通过index -->
		<constructor-arg  index="0" value="红旗"/>
		<constructor-arg index="1" value="120000"/>
	</bean>
	<bean id="car02" class="com.wpx.spring.demo05.Car02">
		<property name="name" value="#{'红旗02'}"></property>
		<property name="price" value="#{'120000'}"></property>
	</bean>
	<!-- 	
	<bean id="person01" class="com.wpx.spring.demo05.Person01">
		<property name="name" value="wpx"></property>
		<property name="car02" ref="car02"></property>
	</bean> -->
	<!-- SpEL写法 -->
	<bean id="person01" class="com.wpx.spring.demo05.Person01">
		<property name="name" value="#{personInfo.showName()}"></property>
		<property name="car02" value="#{car02}"></property>
	</bean>
	<bean id="personInfo" class="com.wpx.spring.demo05.PersonInfo">
		<property name="name" value="wpx"></property>
	</bean>
	
	<!-- spring-demo06 -->
	
	<bean id="collectionBean" class="com.wpx.spring.demo06.CollectionBean">
		<property name="list" >
			<list>
				<value>list01</value>
				<value>list02</value>
			</list>
		</property>
		<property name="set">
			<set>
				<value>set01</value>
				<value>set03</value>
			</set>
		</property>
		<property name="map">
			<map>
				<entry key="key01" value="value01"></entry>
				<entry key="key02" value="value02"></entry>
			</map>
		</property>
		<property name="properties">
			<props>
				<prop key="pro01">pro_vlaue01</prop>
				<prop key="pro02">pro_value02</prop>
			</props> 
		</property>
	</bean>
	
	<!-- spring-demo07 -->
	<!-- 配置扫描的包,将带有注解的类装配为bean -->
	<context:component-scan base-package="com.wpx.spring"/> 
	
	<!-- spring-demo11 -->
		
		<!-- 不带有切点的切面 -->
		<!-- 定义目标对象 -->
	<bean id="customerDao" class="com.wpx.spring.demo11.CustomerDaoImpl"></bean>
		<!-- 定义增强 -->
	<bean id="myBeforeAdvice" class="com.wpx.spring.demo11.MyBeforeAdvice"></bean>
		<!-- Spring支持配置生成代理: -->
	<bean id="customerDaoProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
		<!-- 设置目标对象 -->
		<property name="target" ref="customerDao"></property>
		<!-- 设置实现的接口 ,value中写接口的全路径 -->
		<property name="proxyInterfaces" value="com.wpx.spring.demo11.CustomerDao"></property>
		<!-- value要增强 -->
		<property name="interceptorNames" value="myBeforeAdvice"></property>
		<!-- 强制使用cglib -->
		<property name="optimize" value="true"></property>
	</bean>
	
	<!-- spring-demo12 -->
	
		<!-- 带有切点的切面 -->
		<!-- 定义目标对象 -->
	<bean id="orderDao" class="com.wpx.spring.demo12.OrderDao"></bean>
		<!-- 增强方法 -->
	<bean id="myAroundAdvice" class="com.wpx.spring.demo12.MyAroundAdvice">
	</bean>
	<!-- 定义切点切面: -->
	<bean id="myPointcutAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
			<!-- 定义表达式,规定哪些方法执行拦截 -->
		<!-- . 任意字符  * 任意个 -->
		<!-- <property name="pattern" value=".*"/> -->
		<!-- <property name="pattern" value=".*add.*"></property> -->
		<property name="patterns" value=".*add.*,.*find.*"></property>
		<property name="advice" ref="myAroundAdvice"></property>
	</bean>
	<bean id="orderDaoProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
		<!-- 设置目标对象 -->
		<property name="target" ref="orderDao"></property>
			<!-- 针对类的代理 -->
		<property name="proxyTargetClass" value="true"></property>
		<!-- 在目标上应用增强 -->
		<property name="interceptorNames" value="myPointcutAdvisor"></property>
	</bean>
	
</beans>
